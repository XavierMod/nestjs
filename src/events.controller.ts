/**
 * A controller is part of the MVC (Model – View – Controller) design pattern. The model manages the data, logic and rules of the application.
 */
import {
  Body,
  Controller,
  Delete,
  Get,
  HttpCode,
  Param,
  Patch,
  Post,
} from '@nestjs/common';
import { CreateEventDto } from './create-event.dto';
import { Event } from './event.entity';
import { UpdateEventDto } from './update-event.dto';
import { v4 as uuidv4 } from 'uuid';
import { Like, MoreThan, Repository } from 'typeorm';
import { InjectRepository } from '@nestjs/typeorm';

// Controllers should always be as simple as possible
@Controller('/events')
export class EventsController {
  // Repository methods are always async. When using them, all controller methods should be async.
  constructor(
    @InjectRepository(Event)
    private readonly repository: Repository<Event>,
  ) {}
  // Decorators specity the HTTP verb/path of the operation
  @Get()
  async findAll() {
    return await this.repository.find();
  }

  @Get('/practice')
  async practice() {
    // This will execute the following query:
    /**
     * * SELECT id, name FROM event WHERE (event.id >
     * *  AND event.when > '2021-02-12T13:00:00')
     * *  OR event.description LIKE '%meet%'
     * * ORDER BY event.id DESC
     * * LIMIT 2
     */
    return await this.repository.find({
      // Example of a query with more than one condition
      select: ['id', 'when'],
      where: [
        {
          // Id > 3
          id: MoreThan(3),
          // Date more recent than selected
          when: MoreThan(new Date('2021-02-12T13:00:00')),
        },
        {
          // Description must include word meet
          description: Like('%meet%'),
        },
      ],
      take: 2,
      order: {
        id: 'DESC',
      },
    });
  }

  @Get(':id')
  async findOne(@Param('id') id) {
    const event = await this.repository.findOne(id);
    return event;
  }

  @Post()
  async create(@Body() input: CreateEventDto) {
    // Because CreateEvent is now a Dto, its internal properties are now available
    // e.g. input.name
    return await this.repository.save({
      ...input,
      when: new Date(input.when),
      // id's are autogenerated using repository
      // * id: uuidv4(),
    });
  }

  @Patch()
  async update(@Param('id') id, @Body() input: UpdateEventDto) {
    // All the properties will be optional, because it's using a PartialType
    const event = await this.repository.findOne(id);

    return await this.repository.save({
      ...event,
      ...input,
      when: input.when ? new Date(input.when) : event.when,
    });
  }

  @Delete(':id')
  // Changing the returned status code
  @HttpCode(204)
  async remove(@Param('id') id, @Body() input) {
    const event = await this.repository.findOne(id);
    await this.repository.remove(event);
  }
}
